{"version":3,"sources":["../../src/helpers/microsoftTranslatorApi.js"],"names":["translateString","text","language","unRecognised","amharic","azeri","bengali","kyrgyz","marathi","nepali","punjabi","telugu","tigrinya","tamil","Object","keys","indexOf","method","headers","process","env","MICROSOFT_TRANSLATOR_API_KEY","body","JSON","stringify","response","json","data"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;AAEA,IAAMA,eAAe;AAAA,2FAAG,iBAAOC,IAAP,EAAaC,QAAb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,YADgB,GACD;AACnBC,cAAAA,OAAO,EAAE,IADU;AAEnBC,cAAAA,KAAK,EAAE,IAFY;AAGnBC,cAAAA,OAAO,EAAE,IAHU;AAInBC,cAAAA,MAAM,EAAE,IAJW;AAKnBC,cAAAA,OAAO,EAAE,IALU;AAMnBC,cAAAA,MAAM,EAAE,IANW;AAOnBC,cAAAA,OAAO,EAAE,IAPU;AAQnBC,cAAAA,MAAM,EAAE,IARW;AASnBC,cAAAA,QAAQ,EAAE,IATS;AAUnBC,cAAAA,KAAK,EAAE;AAVY,aADC;;AAAA,kBAclBC,MAAM,CAACC,IAAP,CAAYZ,YAAZ,EAA0Ba,OAA1B,CAAkCd,QAAlC,MAAgD,CAAC,CAd/B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAgBK,6GAErB;AACEe,cAAAA,MAAM,EAAE,MADV;AAEEC,cAAAA,OAAO,EAAE;AACP,6CACEC,OAAO,CAACC,GAAR,CAAYC,4BAFP;AAGP,gCAAgB;AAHT,eAFX;AAOEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAevB,IAAf;AAPR,aAFqB,CAhBL;;AAAA;AAgBZwB,YAAAA,QAhBY;AAAA;AAAA,mBA4BCA,QAAQ,CAACC,IAAT,EA5BD;;AAAA;AA4BZC,YAAAA,IA5BY;AAAA,6CA6BXA,IA7BW;;AAAA;AAAA;AAAA;AAAA,kBA+BZ,gFA/BY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAmCK,6GAErB;AACA;AACEV,cAAAA,MAAM,EAAE,MADV;AAEEC,cAAAA,OAAO,EAAE;AACP,6CACEC,OAAO,CAACC,GAAR,CAAYC,4BAFP;AAGP,gCAAgB;AAHT,eAFX;AAOEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAevB,IAAf;AAPR,aAHqB,CAnCL;;AAAA;AAmCZwB,YAAAA,SAnCY;AAAA;AAAA,mBAgDCA,SAAQ,CAACC,IAAT,EAhDD;;AAAA;AAgDZC,YAAAA,KAhDY;AAAA,6CAiDXA,KAjDW;;AAAA;AAAA;AAAA;AAAA,kBAmDZ,2FAnDY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAf3B,eAAe;AAAA;AAAA;AAAA,GAArB;;eAwDeA,e","sourcesContent":["import fetch from \"cross-fetch\";\n//import microsoftTranslatorApiKey from \"../cert/microsoftTranslatorApiKey\";\n\nconst translateString = async (text, language) => {\n  const unRecognised = {\n    amharic: \"am\",\n    azeri: \"az\",\n    bengali: \"bn\",\n    kyrgyz: \"ky\",\n    marathi: \"mr\",\n    nepali: \"ne\",\n    punjabi: \"pa\",\n    telugu: \"te\",\n    tigrinya: \"ti\",\n    tamil: \"ta\",\n  };\n\n  if (Object.keys(unRecognised).indexOf(language) === -1) {\n    try {\n      const response = await fetch(\n        `https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to=en`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Ocp-Apim-Subscription-Key\":\n              process.env.MICROSOFT_TRANSLATOR_API_KEY,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(text),\n        }\n      );\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw \"An error has occurred when translating from automatically recognised language.\";\n    }\n  } else {\n    try {\n      const response = await fetch(\n        `https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to=en`,\n        // saving this parameter in case if ever needed &from=${unRecognised.language}\n        {\n          method: \"POST\",\n          headers: {\n            \"Ocp-Apim-Subscription-Key\":\n              process.env.MICROSOFT_TRANSLATOR_API_KEY,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(text),\n        }\n      );\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw \"An error has occurred when translating from language that was not automatically detected.\";\n    }\n  }\n};\n\nexport default translateString;\n"],"file":"microsoftTranslatorApi.js"}